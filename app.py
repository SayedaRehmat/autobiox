import streamlit as st
import pandas as pd
import joblib
from fpdf import FPDF

# Load model
 # Train model directly inside app to avoid pickle issues
from sklearn.ensemble import RandomForestClassifier

train_data = {
    "HER2": [3.2, 3.5, 2.9, 7.1, 6.8, 7.3, 10.9, 11.2, 10.6, 1.9, 2.1, 2.3],
    "TP53": [3.0, 2.8, 3.2, 3.1, 3.0, 3.3, 2.9, 3.2, 3.0, 10.1, 10.3, 9.8],
    "BRCA1": [7.2, 6.8, 7.0, 6.0, 6.1, 5.9, 3.2, 3.1, 2.8, 2.9, 3.0, 2.7],
    "ER": [9.1, 9.0, 8.9, 7.1, 6.9, 7.0, 2.2, 2.0, 1.9, 1.0, 1.2, 0.9],
    "PR": [9.0, 8.8, 9.2, 7.0, 7.1, 6.9, 2.1, 1.8, 2.0, 1.1, 0.9, 1.0],
    "EGFR": [3.2, 3.0, 2.9, 4.2, 3.8, 4.0, 5.1, 5.0, 5.3, 8.2, 8.1, 8.0],
    "Subtype": [
        "Luminal A", "Luminal A", "Luminal A",
        "Luminal B", "Luminal B", "Luminal B",
        "HER2+", "HER2+", "HER2+",
        "Triple-Negative", "Triple-Negative", "Triple-Negative"
    ]
}

import pandas as pd
df = pd.DataFrame(train_data)
X = df.drop("Subtype", axis=1)
y = df["Subtype"]

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X, y)


# Sidebar Language Toggle
language = st.sidebar.selectbox("🌐 Language", ["English", "Urdu"])

# Translations
T = {
    "English": {
        "title": "🧬 AutoBio-X — AI Breast Cancer Subtype Predictor",
        "expr_section": "Gene Expression Input",
        "mut_section": "Upload Mutation File",
        "predict": "🎯 Predict Subtype",
        "subtype": "Predicted Subtype",
        "risk": "Risk Level",
        "drugs": "Recommended Drugs",
        "summary": "Clinical Summary",
        "mutation": "Mutation Findings",
        "pdf": "📄 Download PDF Report",
        "footer": "Created by Syeda Rehmat — Founder, BioZero"
    },
    "Urdu": {
        "title": "🧬 آٹو بایو-ایکس — بریسٹ کینسر سب ٹائپ پیشن گوئی",
        "expr_section": "جین ایکسپریشن درج کریں",
        "mut_section": "میوٹیشن فائل اپ لوڈ کریں",
        "predict": "🎯 سب ٹائپ کی پیش گوئی کریں",
        "subtype": "تجویز کردہ سب ٹائپ",
        "risk": "خطرے کی سطح",
        "drugs": "تجویز کردہ ادویات",
        "summary": "طبی خلاصہ",
        "mutation": "میوٹیشن کی تفصیلات",
        "pdf": "📄 مکمل رپورٹ ڈاؤنلوڈ کریں",
        "footer": "تخلیق کار: سیدہ رحمت — بانی، بایو زیرو"
    }
}[language]

# Subtype logic
def get_subtype_info(subtype):
    if subtype == "HER2+":
        return ("High", ["Trastuzumab", "Lapatinib"], "HER2+ is aggressive with HER2 overexpression.")
    elif subtype == "Triple-Negative":
        return ("High", ["Atezolizumab", "Chemotherapy"], "Triple-negative lacks ER, PR, HER2.")
    elif subtype == "Luminal A":
        return ("Low", ["Tamoxifen", "Letrozole"], "Luminal A is slow-growing, ER-positive.")
    elif subtype == "Luminal B":
        return ("Medium", ["Tamoxifen", "Trastuzumab"], "Luminal B is ER-positive but more aggressive.")
    else:
        return ("Unknown", [], "Subtype unclear. Further testing advised.")

# PDF Generator
def generate_pdf(subtype, risk, drugs, summary, mutation_text):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="AutoBio-X Clinical Report", ln=True, align="C")
    pdf.ln(10)
    pdf.cell(200, 10, txt=f"Subtype: {subtype}", ln=True)
    pdf.cell(200, 10, txt=f"Risk Level: {risk}", ln=True)
    pdf.ln(5)
    pdf.cell(200, 10, txt="Drugs:", ln=True)
    for d in drugs:
        pdf.cell(200, 10, txt=f"- {d}", ln=True)
    pdf.ln(5)
    pdf.multi_cell(0, 10, txt=f"Summary: {summary}".encode("latin-1", "replace").decode("latin-1"))
    pdf.ln(5)
    pdf.multi_cell(0, 10, txt=f"Mutations: {mutation_text}".encode("latin-1", "replace").decode("latin-1"))
    pdf.set_font("Arial", "I", 10)
    pdf.ln(10)
    pdf.cell(200, 10, txt="Generated by AutoBio-X | Founder: Syeda Rehmat", ln=True)
    filename = "AutoBioX_Report.pdf"
    pdf.output(filename)
    return filename

# UI START
st.set_page_config(page_title="AutoBio-X", layout="wide")
st.title(T["title"])

# --- SECTION 1: GENE EXPRESSION INPUT ---
st.markdown(f"## {T['expr_section']}")

col1, col2, col3 = st.columns(3)
with col1:
    her2 = st.number_input("HER2", 0.0, 20.0, 5.0)
    tp53 = st.number_input("TP53", 0.0, 20.0, 3.0)
with col2:
    brca1 = st.number_input("BRCA1", 0.0, 20.0, 4.0)
    er = st.number_input("ER", 0.0, 20.0, 2.0)
with col3:
    pr = st.number_input("PR", 0.0, 20.0, 2.0)
    egfr = st.number_input("EGFR", 0.0, 20.0, 4.0)

# --- SECTION 2: UPLOAD MUTATION FILE ---
st.markdown(f"## {T['mut_section']}")
mutation_file = st.file_uploader("Upload mutation CSV (Gene, Mutation, Effect)", type=["csv"])

mutation_text = ""
if mutation_file:
    mut_df = pd.read_csv(mutation_file)
    st.markdown(f"### {T['mutation']}")
    st.dataframe(mut_df)

    findings = []
    for gene in ["TP53", "BRCA1", "PIK3CA", "PTEN", "EGFR"]:
        if gene in mut_df["Gene"].values:
            mut = mut_df[mut_df["Gene"] == gene]["Mutation"].values[0]
            findings.append(f"{gene} mutation detected: {mut}")
    mutation_text = "\n".join(findings)
    st.write(mutation_text)

# --- SECTION 3: PREDICT ---
if st.button(T["predict"]):
    input_data = [[her2, tp53, brca1, er, pr, egfr]]
    subtype = model.predict(input_data)[0]
    risk, drugs, summary = get_subtype_info(subtype)

    st.success(f"{T['subtype']}: {subtype}")
    st.info(f"{T['risk']}: {risk}")
    st.markdown(f"### {T['drugs']}:")
    for d in drugs:
        st.markdown(f"- {d}")
    st.markdown(f"### {T['summary']}:")
    st.write(summary)

    if mutation_text:
        st.markdown(f"### {T['mutation']}:")
        st.write(mutation_text)

    pdf_path = generate_pdf(subtype, risk, drugs, summary, mutation_text)
    with open(pdf_path, "rb") as f:
        st.download_button(T["pdf"], f, file_name=pdf_path)

# --- FOOTER ---
st.markdown(
    f"<hr><center><sub>{T['footer']}</sub></center>",
    unsafe_allow_html=True
)
